openapi: 3.0.0
info:
  description: |
    # イントロダクション

    これは chaintope 社が開発するブロックチェーン Tapyrus を使ったブロックチェーンに関係する機能を簡単に利用するための REST API です。
    現在以下のユースケースをサポートしています。これは今後も拡張されていくことを予定しています。
    * Payment: TPC(Tapyrus Coin) の送金
    * Timestamp: 任意のデータをタイムスタンプとしてブロックチェーンに記録
    * Token: 新しいトークンの発行、送金、焼却。NFTも利用可能

    Tapyrus ブロックチェーンについては以下の情報を参照してください。

    * [Chaintope のブロックチェーンプロトコル](https://www.chaintope.com/chaintope-blockchain-protocol/)
    * [chaintope/tapyrus-core - github](https://github.com/chaintope/tapyrus-core)

    ## Tapyrus API の利用法

    Tapyrus API は REST API として提供されています。利用を開始するためには、Tapyrus API の `エンドポイント` に対して、 `認証` 済みの
    トークンを使いアクセスする必要があります。また、認証されたユーザはそれぞれが自身のウォレットを Tapyrus API 内部に持つことになります。
    ウォレットではそのユーザの TPC やトークンといったアセットを管理するための鍵が管理され、アセットの移動などで利用されます。

    ### Tapyrus API のエンドポイント

    エンドポイントは以下のフォーマットで作成され、 chaintope より提供されます。

    `ap-01.tapyrus.chaintope.com`

    例えば [testnet](https://testnet-explorer.tapyrus.dev.chaintope.com/blocks) では以下のようになります。

    `testnet-api.tapyrus.chaintope.com`

    testnet は誰でも利用可能な動作の確認用のネットワークであり、予告なくリセットされる可能性があります。
    利用に必要な TPC は [faucet](https://testnet-faucet.tapyrus.dev.chaintope.com) から取得できます。

    * [faucet](https://testnet-faucet.tapyrus.dev.chaintope.com)

    ### OpenID Connect を使った認証

    Tapyrus API では [OpenID Connect](https://openid.net/connect/) を使った認証をサポートします。この認証を利用するためには、
    以下のステップを踏みます。

    1. 利用する OpenID Provider(OP) を選択する

      公開された OP から選択する方法と、自身で OP を構築する方法があります。独自のユーザデータベースがあり、そのユーザに Tapyrus API
      を利用させる場合は後者の自身で OP を構築する方法を選択することになります。

    2. OAuth 2.0 Client Credential を入手する

      多くの公開された OP では、アプリケーションを登録して Client Credential を入手する必要があります。手順は利用する OP に従ってください。

    3. Access Token と ID Token を入手する

      OpenID Connect に沿った認証を行い、 token エンドポイントから ID Token を入手します。

    4. Tapyrus API ユーザを作成する

      入手した Access Token と ID Token を Tapyrus API の [createUser API](https://doc.api.tapyrus.chaintope.com/#operation/createUser) へ送り、 Tapyrus API のユーザを作成します。

    コード例を後述の Getting Started ドキュメントで解説していますので、そちらを参照してください。

    ## Tapyrus API ユーザとウォレットについて

    認証により得たアクセストークンを使い、Tapyrus API ユーザを１つ作成する必要があります。
    Tapyrus API の内部では、このユーザ１つにつき１つのウォレットが作成されます。
    ウォレットではアセットの受け取りや、送付に必要な公開鍵と秘密鍵のペアが管理されており、同時にそれらのカギに紐づくアセットも管理されます。
    そのため、認証を行ったユーザごとに独立したアセットの管理が可能になります。

    # Getting Started

    Getting Started ドキュメントでは実際のコード例を交えながらより具体的な Tapyrus API の利用法を解説しています。

      * [Getting Started - [Javascript] Tapyrus API を利用するウェブアプリケーションの開発を学ぶ](https://github.com/chaintope/tapyrus-api-client-examples/tree/main/javascript/GettingStarted-ja.md)
  title: Tapyrus API
  version: 1.0.0
servers:
- url: https://ap-01.tapyrus.chaintope.com/api/v1
security:
- OpenID: []
tags:
- description: 送金API
  name: payment
- description: タイムスタンプAPI
  name: timestamp
- description: トークンAPI
  name: token
paths:
  /payment:
    post:
      description: 指定したアドレスに任意のtapyrusを送金します。
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
        description: |
          `address`, `amount`を受け取り、アドレスに対して指定した額の資金(tapyrus)を送金します。
          任意で`fee`を設定し、送金手数料を指定できます。
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
          description: Created
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: 資金の送金
      tags:
      - payment
      x-contentType: application/json
      x-accepts: application/json
  /timestamp:
    post:
      description: ブロックチェーンにハッシュ値をタイムスタンプとして記録します。
      operationId: addTimestamp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTimestampRequest'
        description: '`content_hash`, `prefix`を受け取り、ブロックチェーンにハッシュ値をタイムスタンプとして記録します。'
      responses:
        "201":
          description: Created
        "422":
          description: Bad Request
      summary: Timestampを記録
      tags:
      - timestamp
      x-contentType: application/json
      x-accepts: application/json
  /timestamps:
    get:
      description: ブロックチェーンに記録したタイムスタンプを取得し、`content_hash`,`prefix`,`txid`を一覧で表示します。
      operationId: getTimestamps
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTimestampsResponse'
          description: success
        "400":
          description: Bad Request
      summary: Timestamp一覧表示
      tags:
      - timestamp
      x-accepts: application/json
  /tokens/issue:
    post:
      description: 任意の数のトークンを新規発行します。
      operationId: issueToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueTokenRequest'
        description: |
          `amount`を受け取り指定した数のトークンを新規発行します。
          任意で`token_type`を設定し、トークンの種類を指定できます。
          `token_type`が未指定な場合、再発行可能なトークンが発行されます。
          トークンの種類は以下の通りです。
          - 1: 再発行可能なトークン
          - 2: 再発行不可能なトークン
          - 3: NFT

          また、`token_type`が未指定または`1`の場合、任意でトークン識別子`id`を指定することで、指定したトークン識別子のトークンを再発行します。
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Created
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: トークンの新規発行
      tags:
      - token
      x-contentType: application/json
      x-accepts: application/json
  /tokens:
    get:
      description: 所有するトークンの総量を取得し、トークン識別子(`token_id`)ごとに総量(`amount`)を一覧で表示します。
      operationId: getTokens
      parameters:
      - content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmationOnlyParam'
        description: オプションで`confirmation_only`を設定でき、`true`の場合ブロックチェーン上で承認済みのトークンのみを取得し、`false`の場合未承認のトークンも含めて取得します。デフォルトは`true`です。
        explode: true
        in: query
        name: confirmation_only
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GetTokensResponse'
                type: array
          description: Success
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: トークンの総量取得
      tags:
      - token
      x-accepts: application/json
  /tokens/{token_id}/reissue:
    post:
      description: 指定した識別子を持つ再発行可能なトークンを任意の量再発行します。
      operationId: reissueToken
      parameters:
      - description: トークンの識別子。
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          $ref: '#/components/schemas/TokenIdParam'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReissueTokenRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Created
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: トークンの再発行
      tags:
      - token
      x-contentType: application/json
      x-accepts: application/json
  /tokens/{token_id}/transfer:
    put:
      description: 任意の数のトークンを指定したアドレスに対して送付します。
      operationId: transferToken
      parameters:
      - content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenIdParam'
        description: トークンの識別子。
        explode: false
        in: path
        name: token_id
        required: true
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferTokenRequest'
        description: '`address`でトークンを送付する相手のアドレスを指定し、`amount`で送付するトークンの量を指定します。'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          description: Created
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: トークンの送付
      tags:
      - token
      x-contentType: application/json
      x-accepts: application/json
  /tokens/{token_id}/burn:
    delete:
      description: 任意の数のトークンを焼却します。
      operationId: burnToken
      parameters:
      - description: トークンの識別子。
        explode: false
        in: path
        name: token_id
        required: true
        schema:
          $ref: '#/components/schemas/TokenIdParam'
        style: simple
      - description: |
          `amount`を受け取り、指定した量のトークンを焼却します。
          `amount`が未入力の場合全てのトークンを焼却します。
        explode: true
        in: query
        name: amount
        required: false
        schema:
          $ref: '#/components/schemas/AmountParam'
        style: form
      responses:
        "200":
          description: Success
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: トークンの焼却
      tags:
      - token
      x-accepts: application/json
  /addresses:
    get:
      description: これまで生成したアドレスを一覧にして返します。
      operationId: getAddresses
      parameters:
      - description: 1ページあたりの件数
        explode: true
        in: query
        name: per
        required: false
        schema:
          $ref: '#/components/schemas/PerPageParam'
        style: form
      - description: ページ番号
        explode: true
        in: query
        name: page
        required: false
        schema:
          $ref: '#/components/schemas/PageNumberParam'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAddressesResponse'
          description: Success
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: これまで生成したアドレスを一覧にして返します。
      tags:
      - address
      x-accepts: application/json
    post:
      description: 受金用のアドレス生成して返します。
      operationId: createAddress
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAddressResponse'
          description: Success
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: アドレスを生成して返します。
      tags:
      - address
      x-accepts: application/json
  /users:
    post:
      description: OpenID Connect を使った認証で得た id_token と access_token を Tapyrus API
        へ登録しユーザを作成します。すでにユーザが存在する場合は認証情報を更新します。
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      security: []
      summary: ユーザを作成します。
      tags:
      - user
      x-contentType: application/json
      x-accepts: application/json
  /userinfo:
    get:
      description: ユーザの`id`,`balance`, `address`の情報を返します。
      operationId: getUserInfo
      parameters:
      - content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmationOnlyParam'
        description: オプションで`confirmation_only`を設定でき、`true`の場合ブロックチェーン上で承認済みのtpc・トークンのみを取得し、`false`の場合未承認のtpc・トークンも含めて取得します。デフォルトは`true`です。
        explode: true
        in: query
        name: confirmation_only
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserinfoResponse'
          description: Success
        "400":
          description: Bad Request
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      summary: ユーザの情報を返します。
      tags:
      - user
      x-accepts: application/json
components:
  schemas:
    PaymentRequest:
      example:
        amount: 10000000
        address: 1CY6TSSARn8rAFD9chCghX5B7j4PKR8S1a
        fee: 100000
      properties:
        address:
          example: 1CY6TSSARn8rAFD9chCghX5B7j4PKR8S1a
          type: string
        amount:
          example: 10000000
          type: integer
        fee:
          example: 100000
          type: integer
      required:
      - address
      - amount
      type: object
    PaymentResponse:
      example:
        txid: 76077052e323a8445c398b690ed8b4b49c9b6e4d1e8e19ea0e7de7cead6f5fc8
      properties:
        txid:
          example: 76077052e323a8445c398b690ed8b4b49c9b6e4d1e8e19ea0e7de7cead6f5fc8
          type: string
      type: object
    AddTimestampRequest:
      example:
        prefix: app
        content_hash: 9ccc644b03a88358a754962903a659a2d338767ee61674dde5434702a6256e6d
      properties:
        content_hash:
          example: 9ccc644b03a88358a754962903a659a2d338767ee61674dde5434702a6256e6d
          type: string
        prefix:
          example: app
          type: string
      required:
      - content_hash
      type: object
    GetTimestampsResponse:
      items:
        properties:
          content_hash:
            example: 9ccc644b03a88358a754962903a659a2d338767ee61674dde5434702a6256e6d
            type: string
          prefix:
            example: app
            type: string
          txid:
            example: 6fce02d39279f6d645ecc710ebcf1dbb7b8104106553d8da13f5db79c5a628fc
            type: string
        type: object
      type: array
    IssueTokenRequest:
      example:
        amount: 100
        token_type: 1
      properties:
        amount:
          example: 100
          type: integer
        token_type:
          example: 1
          type: integer
      required:
      - amount
      type: object
    TokenResponse:
      example:
        token_id: c3ec2fd806701a3f55808cbec3922c38dafaa3070c48c803e9043ee3642c660b46
        txid: 76077052e323a8445c398b690ed8b4b49c9b6e4d1e8e19ea0e7de7cead6f5fc8
      properties:
        token_id:
          example: c3ec2fd806701a3f55808cbec3922c38dafaa3070c48c803e9043ee3642c660b46
          type: string
        txid:
          example: 76077052e323a8445c398b690ed8b4b49c9b6e4d1e8e19ea0e7de7cead6f5fc8
          type: string
      type: object
    ConfirmationOnlyParam:
      example: true
      type: boolean
    GetTokensResponse:
      example:
        amount: 100
        token_id: c3ec2fd806701a3f55808cbec3922c38dafaa3070c48c803e9043ee3642c660b46
      properties:
        token_id:
          example: c3ec2fd806701a3f55808cbec3922c38dafaa3070c48c803e9043ee3642c660b46
          type: string
        amount:
          example: 100
          type: integer
      type: object
    TokenIdParam:
      type: string
    ReissueTokenRequest:
      example:
        amount: 100
      properties:
        amount:
          example: 100
          type: integer
      required:
      - amount
      type: object
    TransferTokenRequest:
      example:
        amount: 100
        address: 1CY6TSSARn8rAFD9chCghX5B7j4PKR8S1a
      properties:
        address:
          example: 1CY6TSSARn8rAFD9chCghX5B7j4PKR8S1a
          type: string
        amount:
          example: 100
          type: integer
      required:
      - address
      type: object
    AmountParam:
      example: 100
      type: integer
    PerPageParam:
      type: integer
    PageNumberParam:
      type: integer
    GetAddressesResponse:
      example:
        addresses:
        - mnzdZUieW2Hqe9GzZzVbcA7nHkDeFhJFzd
        - mnzdZUieW2Hqe9GzZzVbcA7nHkDeFhJFzd
        count: 1
      properties:
        count:
          example: 1
          type: integer
        addresses:
          items:
            example: mnzdZUieW2Hqe9GzZzVbcA7nHkDeFhJFzd
            type: string
          type: array
      type: object
    AddAddressResponse:
      example: mnzdZUieW2Hqe9GzZzVbcA7nHkDeFhJFzd
      type: string
    CreateUserRequest:
      example:
        access_token: SlAV32hkKG
        id_token: eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzcyI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZfV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5NzAKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6qJp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJNqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7TpdQyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoSK5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg
        issuer: https://server.example.com
        client_id: s6BhdRkqt3
      properties:
        id_token:
          description: '[Token Endpoint](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenEndpoint)
            の応答に含まれる id_token'
          example: eyJhbGciOiJSUzI1NiIsImtpZCI6IjFlOWdkazcifQ.ewogImlzcyI6ICJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwKICJzdWIiOiAiMjQ4Mjg5NzYxMDAxIiwKICJhdWQiOiAiczZCaGRSa3F0MyIsCiAibm9uY2UiOiAibi0wUzZfV3pBMk1qIiwKICJleHAiOiAxMzExMjgxOTcwLAogImlhdCI6IDEzMTEyODA5NzAKfQ.ggW8hZ1EuVLuxNuuIJKX_V8a_OMXzR0EHR9R6jgdqrOOF4daGU96Sr_P6qJp6IcmD3HP99Obi1PRs-cwh3LO-p146waJ8IhehcwL7F09JdijmBqkvPeB2T9CJNqeGpe-gccMg4vfKjkM8FcGvnzZUN4_KSP0aAp1tOJ1zZwgjxqGByKHiOtX7TpdQyHE5lcMiKPXfEIQILVq0pc_E2DzL7emopWoaoZTF_m0_N0YzFC6g6EJbOEoRoSK5hoDalrcvRYLSrQAZZKflyuVCyixEoV9GfNQC3_osjzw2PAithfubEEBLuVVk4XUVrWOLrLl0nx7RkKU8NXNHq-rvKMzqg
          type: string
        issuer:
          description: '[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)
            における issuer'
          example: https://server.example.com
          type: string
        client_id:
          description: '[OAuth 2.0 Client Credential](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1)
            における client_id'
          example: s6BhdRkqt3
          type: string
        access_token:
          description: '[Token Endpoint](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#TokenEndpoint)
            の応答に含まれる access_token'
          example: SlAV32hkKG
          type: string
      required:
      - access_token
      - client_id
      - id_token
      - issuer
      type: object
    UserinfoResponse:
      example:
        sub: 1
        balances:
          tpc: 50000000000
        addresses:
        - 1FkZ5tBroQA8GiNstmtjLcYjGcqZTfJJhh
        - 1FkZ5tBroQA8GiNstmtjLcYjGcqZTfJJhh
      properties:
        sub:
          example: 1
          type: integer
        balances:
          $ref: '#/components/schemas/UserinfoResponse_balances'
        addresses:
          items:
            example: 1FkZ5tBroQA8GiNstmtjLcYjGcqZTfJJhh
            type: string
          type: array
      type: object
    UserinfoResponse_balances:
      example:
        tpc: 50000000000
      properties:
        tpc:
          example: 50000000000
          type: integer
      type: object
  securitySchemes:
    OpenID:
      openIdConnectUrl: https://accounts.google.com/.well-known/openid-configuration
      type: openIdConnect

